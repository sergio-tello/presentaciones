import numpy as np
import random
from timeit import default_timer as timer
import multiprocessing


pool_5d = [38569, 41333, 85991, 72719, 83653, 78367, 46559, 27431, 42221, 28309, 
           37561, 36263, 55511, 97429, 13469, 50023, 60521, 14741, 62687, 48023, 
           43019, 45677, 71293, 33487, 32869, 92377, 67901, 65983, 92233, 23339, 
           54631, 84229, 69011, 16411, 80473, 11801, 77747, 28027, 71257, 85061, 
           95441, 72613, 18457, 38707, 30881, 80341, 35129, 86861, 18661, 65381, 
           90173, 71941, 83663, 85837, 58693, 73013, 19381, 67819, 49037, 60017, 
           81629, 43991, 90821, 14407, 93491, 78779, 64037, 14753, 30347, 58211, 
           61297, 54377, 26251, 91573, 55787, 63367, 72871, 53927, 73999, 48523, 
           41863, 67369, 60937, 73421, 46351, 48437, 11311, 13873, 40597, 14321, 
           15881, 55799, 73637, 48767, 43117, 18517, 34649, 65213, 39229, 40357]

pool_6d = [629921, 404699, 900539, 782141, 910219, 907999, 410489, 272003, 379343, 560081, 
           794831, 417953, 341681, 598501, 480349, 442699, 796931, 791257, 263023, 559901, 
           451799, 494719, 187823, 492017, 127739, 400417, 250853, 854729, 731503, 439631, 
           273551, 127507, 399647, 436357, 328481, 220721, 358201, 560689, 891509, 887651, 
           419087, 375283, 865769, 312203, 381989, 283277, 502829, 364669, 889391, 542207, 
           517873, 719197, 750401, 880109, 907667, 762893, 206641, 393571, 165047, 451601, 
           829601, 454859, 738401, 350549, 562297, 767867, 623351, 100049, 710089, 288529, 
           229847, 391939, 990211, 630733, 427369, 947641, 343709, 544861, 470227, 756971, 
           415273, 906383, 287669, 821467, 826453, 696067, 480773, 268253, 685039, 560617, 
           267401, 761833, 201493, 244589, 355529, 837659, 200671, 210619, 229469, 602233]

pool_7d = [1447759, 3160687, 5670103, 5845387, 3686321, 7063703, 3344351, 8292301, 5403583, 2473607, 
           5770993, 8494963, 8149481, 1748503, 7545257, 5845193, 5803207, 2994961, 4803049, 3942047, 
           5859071, 9442493, 9429731, 4661989, 1572677, 8810147, 3071753, 5128391, 8597143, 1218691, 
           2033257, 6483017, 1907041, 9847249, 2113789, 1593797, 9630161, 1480643, 9940811, 7455803, 
           2291557, 3928807, 2464463, 7020463, 4888753, 2770993, 4750127, 3939589, 7633949, 3763933, 
           9083029, 7603417, 6239393, 5952137, 6301187, 1133147, 6675839, 7232551, 3308507, 5268091, 
           4260833, 6590191, 8730263, 4604111, 7151707, 8701271, 1772959, 3363887, 5871539, 7986739, 
           7232167, 1996559, 4235549, 5311931, 8110103, 1037401, 4407103, 5408509, 2479717, 6343949, 
           2664943, 3691549, 4447249, 1386491, 9647447, 6479807, 4975127, 9883603, 8280749, 4039639, 
           4508039, 5920121, 7463321, 4912471, 1361587, 3510581, 9609851, 6687809, 5369599, 8381993]

pool_8d = [37679611, 46522793, 38490367, 27836971, 30062561, 11786477, 97582717, 11940077, 71514953, 32855831, 
           44216239, 88232939, 22029731, 51941437, 95161951, 56953817, 33993769, 28178291, 11390759, 71013871, 
           37642663, 71490817, 70853491, 85708621, 52822997, 52874417, 14680489, 38125327, 31149211, 33220067, 
           56776129, 59677229, 71814937, 10196161, 66117383, 59710379, 45882691, 76678081, 68735813, 34942693, 
           58941083, 32315653, 33717737, 66676901, 51373921, 54468707, 51729439, 99372037, 22388537, 71584339, 
           52345369, 14629963, 43341553, 78543037, 73475687, 87187829, 59786333, 89432939, 42481297, 82613099, 
           78221543, 16220917, 63395281, 50828473, 59341021, 28493431, 36902353, 79594709, 76732681, 65824651, 
           92438821, 89113681, 14434817, 36323891, 61970921, 93491633, 23292719, 55799533, 50863283, 82236823, 
           85990013, 21507649, 41323627, 60185473, 79262411, 90294443, 97468949, 57224927, 85721899, 81754733, 
           83288297, 65858641, 43870291, 69951899, 62613497, 95809159, 13820743, 12412067, 94312433, 37753279]

def factorizar(N, longitud_N):
    '''
    Dado un entero N esta función busca factores de longitud N / 2 
    '''
    mitad_longitud_N = int(np.floor(longitud_N / 2))
    lim_inf_rango = 10**(mitad_longitud_N - 1)
    lim_sup_rango = 10**(mitad_longitud_N) - 1
    long_rango = lim_sup_rango - lim_inf_rango + 1
    rango = range(lim_inf_rango, lim_sup_rango + 1, 1)
    for num in rango:
        digito = num % 10
        if digito == 1 or digito == 3 or digito == 7 or digito == 9:
            if (N % num == 0):
                return

def mostrar_conteo_factorizaciones(longitud_N, pool_primos, tiempo_total):
    '''
    Dada una lista de primos pool_primos esta función factoriza tantos números aleatorios 
    de la forma p * q de longitud longitud_N como sea posible en tiempo_total (en segundos).
    '''
    print('Factorizando enteros de', longitud_N, 'dígitos')
    print('----------------------------------')
    inicio = timer()
    contador = 0
    while timer() - inicio < tiempo_total:
        contador = contador + 1
        p, q = random.choices(pool_primos, k=2)
        factorizar(p * q, longitud_N)
        print('▄', end='')
    fin = timer()
    print('\n')
    print('Se factorizaron', contador, 'enteros en', round(fin-inicio, 2), 's.', end=' ')
    print('\n')    	
    return contador




resultado_10 = mostrar_conteo_factorizaciones(10, pool_5d, 10)
resultado_12 = mostrar_conteo_factorizaciones(12, pool_6d, 10)
resultado_14 = mostrar_conteo_factorizaciones(14, pool_7d, 10)


print('Factor 10-12:', round(resultado_10/resultado_12, 1))
print('Factor 12-14:', round(resultado_12/resultado_14, 1))
print('Base exponencial estimada:', round(np.sqrt(resultado_10/resultado_12 * resultado_12/resultado_14), 1))